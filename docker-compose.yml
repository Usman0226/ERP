version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: campushub360
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Django Application
  web:
    build: .
    environment:
      # Database
      POSTGRES_DB: campushub360
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Django
      SECRET_KEY: your-super-secret-key-change-this-in-production-at-least-50-characters-long
      DEBUG: "False"
      DJANGO_SETTINGS_MODULE: campshub360.production
      
      # Security
      SECURE_SSL_REDIRECT: "False"
      CSRF_COOKIE_SECURE: "False"
      SESSION_COOKIE_SECURE: "False"
      
      # Performance
      GUNICORN_WORKERS: 4
      GUNICORN_WORKER_CLASS: gevent
      GUNICORN_WORKER_CONNECTIONS: 1000
      
      # CORS
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
      CSRF_TRUSTED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
      
      # Allowed hosts
      ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0
    ports:
      - "80:80"
      - "8000:8000"
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Nginx Load Balancer (for production-like testing)
  nginx-lb:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf
    depends_on:
      - web
    networks:
      - app-network
    profiles:
      - production-test

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
