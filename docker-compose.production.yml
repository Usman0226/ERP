version: '3.8'

services:
  # PostgreSQL Database (RDS recommended for production)
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-campushub360}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis Cache (ElastiCache recommended for production)
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Django Application (Multiple instances for load balancing)
  web:
    build: .
    environment:
      # Database
      POSTGRES_DB: ${POSTGRES_DB:-campushub360}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST:-db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      
      # Redis
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      
      # Django
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: "False"
      DJANGO_SETTINGS_MODULE: campshub360.production
      
      # Security
      SECURE_SSL_REDIRECT: ${SECURE_SSL_REDIRECT:-True}
      CSRF_COOKIE_SECURE: ${CSRF_COOKIE_SECURE:-True}
      SESSION_COOKIE_SECURE: ${SESSION_COOKIE_SECURE:-True}
      
      # Performance - Optimized for 20k+ users/sec
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-16}
      GUNICORN_WORKER_CLASS: ${GUNICORN_WORKER_CLASS:-gevent}
      GUNICORN_WORKER_CONNECTIONS: ${GUNICORN_WORKER_CONNECTIONS:-1000}
      GUNICORN_TIMEOUT: ${GUNICORN_TIMEOUT:-30}
      GUNICORN_KEEPALIVE: ${GUNICORN_KEEPALIVE:-5}
      
      # CORS
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS}
      
      # Allowed hosts
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      
      # Email
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
    ports:
      - "8000-8003:8000"  # Multiple ports for load balancing
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/var/log/django
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      replicas: 4  # Multiple instances for high availability
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-production-lb.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    depends_on:
      - web
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
